package com.fredastone.pandacore.entity;
// Generated Feb 7, 2019 1:36:16 AM by Hibernate Tools 4.3.5.Final

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.Data;

/**
 * TAgents generated by hbm2java
 */
@Data
@Entity
@Table(name = "t_agents")
public class Agent implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Id
	@Column(name = "id", unique = true, nullable = false)
	private int id;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "applogindetails")
	private User users;
	
	@Column(name = "firstname", nullable = false, length = 20)
	private String firstname;
	

	@Column(name = "middlename", length = 20)
	private String middlename;
	

	@Column(name = "lastname", length = 20)
	private String lastname;
	
	@Column(name = "personalemail", nullable = false)
	private Serializable personalemail;
	
	@Column(name = "isactive", nullable = false)
	private boolean isactive;
	
	@Column(name = "isterminated", nullable = false)
	private boolean isterminated;
	
	@Column(name = "mobile", length = 20)
	private String mobile;
	
	@Temporal(TemporalType.DATE)
	@Column(name = "dateofbirth", length = 13)
	private Date dateofbirth;
	
	@Column(name = "agentcommissionrate", nullable = false, precision = 131089, scale = 0)
	private BigDecimal agentcommissionrate;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "deactivatedon", length = 29)
	private Date deactivatedon;
	

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createon", nullable = false, length = 29)
	private Date createon;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "TAgents")
	private Set<AgentsMeta> agentsMetas;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "TAgents")
	private Set<Sales> sales;



}
